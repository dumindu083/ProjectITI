import org.encog.neural.data.NeuralData;
import org.encog.neural.data.NeuralDataPair;
import org.encog.neural.data.NeuralDataSet;
import org.encog.neural.data.basic.BasicNeuralDataSet;
import org.encog.neural.networks.BasicNetwork;
import org.encog.neural.networks.Train;
import org.encog.neural.networks.layers.FeedforwardLayer;
import org.encog.neural.networks.training.backpropagation.Backpropagation;

public class NeuralNetwork {

  // fill these in with your training parameters
  public static final double LEARNING_RATE = 0.7;
  public static final double MOMENTUM = 0.7;
  public static final int MAX_ITERATION = 5000;
  public static final double MAX_ERROR = 0.01;

private static BasicNetwork getNetwork() {
  BasicNetwork network = new BasicNetwork();
  network.addLayer(new FeedforwardLayer(5));
  network.addLayer(new FeedforwardLayer(7));
  network.addLayer(new FeedforwardLayer(4));
  network.reset();
  return network;
}

private static NeuralDataSet getTraining() {
  final double[][] INPUT = {
    { 0.2543,0.3299,0.0327,0.2265,0.0891 },
    { 0.5455,0.5377,0.0498,0.4912,0.1844 },
    { 0.2342,0.1636,0.2511,0.0227,0.3266 },
    { 0.4945,0.5669,0.3847,0.191,0.6515 },
    { 0.0473,0.0727,0.2381,0.1742,0.3511 },
    { 0.7299,0.8961,3.0E-4,0.3795,0.0636 },
    { 0.5728,0.4747,0.0449,0.4607,0.2139 },
    { 0.3388,0.2587,6.0E-4,0.234,0.1083 },
    { 0.1985,0.1431,0.3442,0.3584,0.6666 },
    { 0.0979,0.0844,2.0E-4,0.1918,0.0036 },
    { 0.0496,0.0345,1.0E-4,0.227,5.0E-4 },
    { 0.1262,0.1344,0.4892,0.1471,0.3516 },
    { 0.3379,0.2231,0.549,0.2555,0.4134 },
    { 0.1292,0.1329,0.3568,0.3976,0.5116 },
    { 0.2439,0.2556,0.5515,0.0561,0.6778 },
    { 0.6312,0.6722,0.0123,0.113,0.1085 },
    { 0.2592,0.2244,0.0407,0.141,0.16 },
    { 0.0095,0.0453,2.0E-4,0.0443,0.002 },
    { 0.2345,0.1958,0.3481,0.1683,0.7724 },
    { 0.1917,0.238,0.2372,0.0806,0.3146 },
    { 0.2797,0.3339,0.4295,0.3264,0.6403 },
    { 0.6895,0.7387,0.061,0.281,0.1863 },
    { 0.004,0.0042,0.2435,0.0329,0.1469 },
    { 0.12,0.0716,0.4673,0.263,0.5101 },
    { 0.5719,0.6267,0.3212,0.3596,0.6529 },
    { 0.0962,0.0489,0.0,0.3998,7.0E-4 },
    { 0.7625,0.8035,0.1199,0.1385,0.2575 },
    { 0.3765,0.2905,0.1938,0.4405,0.6568 },
    { 0.0899,0.0394,0.6373,0.4365,0.6651 },
    { 0.5827,0.624,0.5182,0.2783,0.6554 },
    { 0.0913,0.0555,0.8268,0.2743,0.389 },
    { 0.7171,0.7833,0.1322,0.5572,0.2832 },
    { 0.0715,0.0,0.047,0.0227,0.1539 },
    { 0.5848,0.6533,1.0,0.215,1.0 },
    { 0.3867,0.5017,0.2541,0.5396,0.6958 },
    { 0.2141,0.0714,1.0E-4,0.4729,0.0027 },
    { 0.8897,0.8982,0.2381,0.1209,0.2732 },
    { 0.0,0.0173,1.0E-4,0.4681,8.0E-4 },
    { 0.3397,0.4381,0.0929,0.0926,0.2741 },
    { 0.1356,0.1704,0.1298,0.7504,0.3034 },
    { 0.1475,0.0999,1.0E-4,0.1933,0.0021 },
    { 0.8578,0.8786,0.0226,0.063,0.1647 },
    { 0.1532,0.1624,0.1199,0.8155,0.1062 },
    { 0.1776,0.1941,0.3758,0.6043,0.3091 },
    { 0.6763,0.7646,0.5387,0.163,0.4074 },
    { 0.0517,0.1146,0.0142,0.3254,0.0364 },
    { 0.2102,0.2452,0.1947,0.4616,0.2824 },
    { 0.0673,0.071,0.1809,0.1588,0.1896 },
    { 0.6028,0.6749,0.7324,0.0733,0.5779 },
    { 0.2892,0.3833,0.3443,0.2347,0.4755 },
    { 0.0498,0.0585,0.0665,0.1076,0.1029 },
    { 0.8473,0.8436,0.0154,0.0,0.1497 },
    { 0.0322,0.0785,0.2302,0.8621,0.2486 },
    { 0.7409,0.823,0.1332,0.0878,0.3568 },
    { 0.1485,0.3092,0.0494,0.3739,0.2053 },
    { 0.0401,0.0303,0.1971,0.3068,0.1276 },
    { 0.8885,0.9214,0.0212,0.5442,0.1674 },
    { 0.0347,0.0643,0.0472,0.0337,0.0648 },
    { 0.2096,0.288,0.0462,0.2823,0.2097 },
    { 0.1665,0.2609,0.1381,0.1666,0.2532 },
    { 0.0601,0.0063,0.0,0.3849,0.0 },
    { 0.1558,0.1916,0.1027,0.5558,0.1165 },
    { 0.1484,0.2017,0.7996,0.3665,0.5593 },
    { 0.0472,0.0465,0.3542,1.0,0.3749 },
    { 0.172,0.1951,0.805,0.4065,0.6997 },
    { 0.1475,0.1388,7.0E-4,0.1765,0.0072 },
    { 1.0,1.0,0.1766,0.166,0.2175 },
    { 0.0734,0.129,0.2943,0.2271,0.1741 },
    { 0.2075,0.2926,0.1801,0.8189,0.3136 },
    { 0.2443,0.3333,0.4085,0.5042,0.5735 },
    { 0.1138,0.1327,0.0015,0.2232,0.0124 },
    { 0.9292,0.969,0.0288,0.1395,0.1415 },
    { 0.0033,0.0299,1.0E-4,0.0696,0.0013 },
    { 0.1869,0.2707,0.0566,0.5283,0.2257 },
    { 0.3039,0.378,0.1626,0.0539,0.7865 },
  };

  final double[][] IDEAL = {
    { 0.0,0.0,0.0,0.0 },
    { 0.0,0.0,0.0,0.0 },
    { 0.0,0.0,0.0,0.0 },
    { 0.0,0.0,0.0,0.0 },
    { 0.0,0.0,0.0,0.0 },
    { 0.0,0.0,0.0,1.0 },
    { 0.0,0.0,0.0,1.0 },
    { 0.0,0.0,0.0,1.0 },
    { 0.0,0.0,0.0,1.0 },
    { 0.0,0.0,0.0,1.0 },
    { 0.0,0.0,1.0,0.0 },
    { 0.0,0.0,1.0,0.0 },
    { 0.0,0.0,1.0,0.0 },
    { 0.0,0.0,1.0,0.0 },
    { 0.0,0.0,1.0,0.0 },
    { 0.0,0.0,1.0,1.0 },
    { 0.0,0.0,1.0,1.0 },
    { 0.0,0.0,1.0,1.0 },
    { 0.0,0.0,1.0,1.0 },
    { 0.0,0.0,1.0,1.0 },
    { 0.0,1.0,0.0,0.0 },
    { 0.0,1.0,0.0,0.0 },
    { 0.0,1.0,0.0,0.0 },
    { 0.0,1.0,0.0,0.0 },
    { 0.0,1.0,0.0,0.0 },
    { 0.0,1.0,0.0,1.0 },
    { 0.0,1.0,0.0,1.0 },
    { 0.0,1.0,0.0,1.0 },
    { 0.0,1.0,0.0,1.0 },
    { 0.0,1.0,0.0,1.0 },
    { 0.0,1.0,1.0,0.0 },
    { 0.0,1.0,1.0,0.0 },
    { 0.0,1.0,1.0,0.0 },
    { 0.0,1.0,1.0,0.0 },
    { 0.0,1.0,1.0,0.0 },
    { 0.0,1.0,1.0,1.0 },
    { 0.0,1.0,1.0,1.0 },
    { 0.0,1.0,1.0,1.0 },
    { 0.0,1.0,1.0,1.0 },
    { 0.0,1.0,1.0,1.0 },
    { 1.0,0.0,0.0,0.0 },
    { 1.0,0.0,0.0,0.0 },
    { 1.0,0.0,0.0,0.0 },
    { 1.0,0.0,0.0,0.0 },
    { 1.0,0.0,0.0,0.0 },
    { 1.0,0.0,0.0,1.0 },
    { 1.0,0.0,0.0,1.0 },
    { 1.0,0.0,0.0,1.0 },
    { 1.0,0.0,0.0,1.0 },
    { 1.0,0.0,0.0,1.0 },
    { 1.0,0.0,1.0,0.0 },
    { 1.0,0.0,1.0,0.0 },
    { 1.0,0.0,1.0,0.0 },
    { 1.0,0.0,1.0,0.0 },
    { 1.0,0.0,1.0,0.0 },
    { 1.0,0.0,1.0,1.0 },
    { 1.0,0.0,1.0,1.0 },
    { 1.0,0.0,1.0,1.0 },
    { 1.0,0.0,1.0,1.0 },
    { 1.0,0.0,1.0,1.0 },
    { 1.0,1.0,0.0,0.0 },
    { 1.0,1.0,0.0,0.0 },
    { 1.0,1.0,0.0,0.0 },
    { 1.0,1.0,0.0,0.0 },
    { 1.0,1.0,0.0,0.0 },
    { 1.0,1.0,0.0,1.0 },
    { 1.0,1.0,0.0,1.0 },
    { 1.0,1.0,0.0,1.0 },
    { 1.0,1.0,0.0,1.0 },
    { 1.0,1.0,0.0,1.0 },
    { 1.0,1.0,1.0,0.0 },
    { 1.0,1.0,1.0,0.0 },
    { 1.0,1.0,1.0,0.0 },
    { 1.0,1.0,1.0,0.0 },
    { 1.0,1.0,1.0,0.0 },
  };
  return new BasicNeuralDataSet(INPUT, IDEAL);
}

  public static BasicNetwork trainNetwork(BasicNetwork network,NeuralDataSet trainingSet) {
    final Train train = new Backpropagation(
      network,
      trainingSet,
      LEARNING_RATE,
      MOMENTUM);

    int epoch = 1;

    do {
      train.iteration();
      System.out.println("Iteration #" + epoch + " Error:" + train.getError());
      epoch++;
    } while ((epoch < MAX_ITERATION) && (train.getError() > MAX_ERROR));

    return (BasicNetwork)train.getNetwork();
  }

  public static void queryNetwork(BasicNetwork network,NeuralDataSet trainingSet) {
    // test the neural network
    System.out.println("Neural Network Query:");
    for(NeuralDataPair pair: trainingSet ) {
      final NeuralData output = network.compute(pair.getInput());

      System.out.print("Input: ");
      for(int i=0;i<pair.getInput().size();i++) {
        if( i!=0 )
          System.out.print(",");
        System.out.print(pair.getInput().getData(i));
      }
      System.out.print(", Output: ");
      for(int i=0;i<output.size();i++) {
        if( i!=0 )
          System.out.print(",");
        System.out.print(output.getData(i));
      }

      System.out.print(", Expected: ");
      for(int i=0;i<pair.getIdeal().size();i++) {
        if( i!=0 )
          System.out.print(",");
        System.out.print(pair.getIdeal().getData(i));
      }
    System.out.println("");
  }
  }

  public static void main(final String args[]) {

    final NeuralDataSet trainingSet = getTraining();
    BasicNetwork network = getNetwork();
    network = trainNetwork(network,trainingSet);
    queryNetwork(network,trainingSet);
  }
}